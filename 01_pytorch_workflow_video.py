# -*- coding: utf-8 -*-
"""01_pytorch-workflow-video.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XzUSXt8Ivsw5p7xpZ2Yj3XK72K-HT2Wo
"""

#pytorch workflow

## pytorch end-to-edn workflow

what_we_covering = {1: "data(prepare and load)",
                    2: "build model",
                    3: "fitting",
                    4: "inference",
                    5: "saving and loading",
                    6: "putting it all together"
                    }

import torch
from torch import nn ## nn contains all of pytorch building blocks for nns
import matplotlib.pyplot as plt
import numpy as np
torch.__version__

## 1. Data preparing and loading

## create known parameters
weight = 0.7
bias = 0.3

#create
start = 0
end = 1
step = 0.02
X = torch.arange(start, end, step).unsqueeze(dim = 1)
y = weight * X + bias

X[:10], y[:10]

train_split = int(0.8*len(X))
X_train, y_train = X[:train_split], y[:train_split]
X_test, y_test = X[train_split:], y[train_split:]

X_train, y_test

# how to better visualise or data?

def plot_predictions(train_data = X_train,
                     train_label = y_train,
                     test_data = X_test,
                     test_label = y_test,
                    predictions = None):

 """
 plots training data, test data and pred
 """
 plt.figure(figsize=(10,7))
 plt.scatter(train_data, train_label, c="b", s=4, label="training data")
 plt.scatter(test_data, test_label, c="g", s=4, label="test data")
 if predictions is not None:
  plt.scatter(test_data, predictions, c="r", s=4, label="predictions")
 plt.legend(prop={"size":14})

plot_predictions();

## Build Model

# create linear regression model

# Create a Linear Regression model class
class LinearRegressionModel(nn.Module): # <- almost everything in PyTorch is a nn.Module (think of this as neural network lego blocks)
    def __init__(self):
        super().__init__()
        self.weights = nn.Parameter(torch.randn(1, # <- start with random weights (this will get adjusted as the model learns)
                                                dtype=torch.float), # <- PyTorch loves float32 by default
                                   requires_grad=True) # <- can we update this value with gradient descent?)

        self.bias = nn.Parameter(torch.randn(1, # <- start with random bias (this will get adjusted as the model learns)
                                            dtype=torch.float), # <- PyTorch loves float32 by default
                                requires_grad=True) # <- can we update this value with gradient descent?))

    # Forward defines the computation in the model
    def forward(self, x: torch.Tensor) -> torch.Tensor: # <- "x" is the input data (e.g. training/testing features)
        return self.weights * x + self.bias # <- this is the linear regression formula (y = m*x + b)

# a neurak network is a graph
# torch.nn.paramter

torch.randn(1)

# torch. nn. module = base class
# def forward is forward computation

# Set manual seed since nn.Parameter are randomly initialized
torch.manual_seed(42)

# Create an instance of the model (this is a subclass of nn.Module that contains nn.Parameter(s))
model_0 = LinearRegressionModel()

# Check the nn.Parameter(s) within the nn.Module subclass we created
list(model_0.parameters())

# list named parameters
model_0.state_dict()

# Make predictions with model


# Note: in older PyTorch code you might also see torch.no_grad()
# with torch.no_grad():
#   y_preds = model_0(X_test)



"""##Loss Function

* To train the **model** and an **optimiser** to adjust the models parameters
"""

# Create the loss function
loss_fn = nn.L1Loss() # MAE loss is same as L1Loss

# Create the optimizer
optimizer = torch.optim.SGD(params=model_0.parameters(), # parameters of target model to optimize
                            lr=0.01) # learning rate (how much the optimizer should change parameters at each step, higher=more (less stable), lower=less (might take a long time))



"""* Building a training loop with a testing loop in python
* loop through the data
*  forward pass data going through
* calculate the loss (copare forward pass predicitons to ground truth labels)
* optimizer zerp grad
* loss backward
* optimiser step
"""

torch.manual_seed(42)

# Set the number of epochs (how many times the model will pass over the training data)
epochs = 1000

# Create empty loss lists to track values
train_loss_values = []
test_loss_values = []
epoch_count = []

for epoch in range(epochs):
    ### Training

    # Put model in training mode (this is the default state of a model)
    model_0.train()

    # 1. Forward pass on train data using the forward() method inside
    y_pred = model_0(X_train)
    # print(y_pred)

    # 2. Calculate the loss (how different are our models predictions to the ground truth)
    loss = loss_fn(y_pred, y_train)

    # 3. Zero grad of the optimizer
    optimizer.zero_grad()

    # 4. Loss backwards
    loss.backward()

    # 5. Progress the optimizer
    optimizer.step()

    ### Testing

    # Put the model in evaluation mode
    model_0.eval()

    with torch.inference_mode():
      # 1. Forward pass on test data
      test_pred = model_0(X_test)

      # 2. Caculate loss on test data
      test_loss = loss_fn(test_pred, y_test.type(torch.float)) # predictions come in torch.float datatype, so comparisons need to be done with tensors of the same type

      # Print out what's happening
      if epoch % 100 == 0:
            epoch_count.append(epoch)
            train_loss_values.append(loss.detach().numpy())
            test_loss_values.append(test_loss.detach().numpy())
            print(f"Epoch: {epoch} | MAE Train Loss: {loss} | MAE Test Loss: {test_loss} ")

list(model_0.parameters())

with torch.inference_mode():
  y_preds_new = model_0(X_test)

model_0.state_dict()

plot_predictions(predictions=y_preds_new)

plt.plot(epoch_count, train_loss_values, label="Train Loss")
plt. plot(epoch_count, test_loss_values, label="Test Loss")
plt.title

"""## saving a model in PyTorch
There are three main methods one should know about for saving and loading a model

1. `torch.save()` python pickele module
2. `torch.load()` load a model
3. `torch.nn.Moudle.load_state_dict()`
"""

from pathlib import Path

# 1. Create a model directory
Model_Path = Path("models")
Model_Path.mkdir(parents=True, exist_ok=True)

# 2. create model save path
Model_Name = '01_pytorch-workflow_model_0.pth'
Model_Save_Path = Model_Path / Model_Name

# 3. Save a model using save dict
print(f"Saving Model to: {Model_Save_Path}" )
torch.save(obj=model_0.state_dict(),f=Model_Save_Path)

# To load in a saved state dict, we have to instaitate a new instanvce of our model class
loaded_model_0 = LinearRegressionModel()
loaded_model_0.load_state_dict(torch.load(f=Model_Save_Path)
)

"""## 6. Putting it all Together

"""

#6.1 Data

# Create some data using the linear regression model with wieght s and bias